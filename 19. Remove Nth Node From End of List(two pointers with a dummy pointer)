/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:

    ListNode* removeNthFromEnd(ListNode* head, int n) {
        //setting up two pointers n dummy
        //remember when creating dummy, we need to assign it a value 0
        ListNode* dummy=new ListNode(0);
        dummy->next = head;
        ListNode* ptr1=dummy;
        ListNode* ptr2=dummy;
        
        //advancing ptr1
        //initializing ptr1 at dummy prevents the ptr1 going beyond nullptr
        for(int i=1;i<=n+1;i++){
            ptr1=ptr1->next;
            
        }
        //now the gap between ptr1 and ptr2 is n nodes
        
        while(ptr1!=nullptr){
            ptr1=ptr1->next;
            ptr2=ptr2->next;
            
        }
        //now the ptr1 points to null, ptr2 points to (n+1)last node
        //let ptr2 point to n-1 last node instead of n last node
        //if ptr2 is still dummy, then it will point to null since head pointed to null, after this the head will be null as required
    
        
        ptr2->next=ptr2->next->next;
        
        //return from head, which is pointed by dummy
        return dummy->next;
        
        
        
        
        
        
     
        
        
       
        
        
    }
};
